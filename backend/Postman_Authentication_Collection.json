{
  "info": {
    "name": "College Marketplace - Authentication API",
    "description": "Complete authentication flow including registration, login, logout, and secure forgot password system",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication Flow",
      "item": [
        {
          "name": "1Ô∏è‚É£ Register User (Auto-Login)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseData = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', responseData.data.accessToken);",
                  "    console.log('‚úÖ Registration successful - Auto-logged in');",
                  "    console.log('Access Token saved:', responseData.data.accessToken.substring(0, 20) + '...');",
                  "} else {",
                  "    console.log('‚ùå Registration failed');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a new user and automatically login with JWT tokens. No email verification required."
          },
          "response": []
        },
        {
          "name": "2Ô∏è‚É£ Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseData = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', responseData.data.accessToken);",
                  "    console.log('‚úÖ Login successful');",
                  "    console.log('New Access Token saved:', responseData.data.accessToken.substring(0, 20) + '...');",
                  "} else {",
                  "    console.log('‚ùå Login failed');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with email and password to get fresh JWT tokens."
          },
          "response": []
        },
        {
          "name": "3Ô∏è‚É£ Logout User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.collectionVariables.set('accessToken', '');",
                  "    console.log('‚úÖ Logout successful - Token cleared');",
                  "} else {",
                  "    console.log('‚ùå Logout failed');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "logout"]
            },
            "description": "Logout user and clear session. Requires valid access token."
          },
          "response": []
        }
      ],
      "description": "Standard authentication flow: Register ‚Üí Login ‚Üí Logout"
    },
    {
      "name": "üîí Forgot Password Flow",
      "item": [
        {
          "name": "1Ô∏è‚É£ Request Password Reset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('‚úÖ Password reset OTP sent');",
                  "    console.log('üìß Check email or server console for OTP');",
                  "    console.log('‚è∞ OTP expires in 15 minutes');",
                  "} else {",
                  "    console.log('‚ùå Failed to send reset OTP');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/forgot-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "forgot-password"]
            },
            "description": "Request password reset OTP. Always returns success for security (doesn't reveal if email exists)."
          },
          "response": []
        },
        {
          "name": "2Ô∏è‚É£ Verify Reset OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('‚úÖ OTP verified successfully');",
                  "    console.log('üîê You can now reset your password');",
                  "} else {",
                  "    console.log('‚ùå Invalid or expired OTP');",
                  "    console.log('‚ö†Ô∏è Check attempt limit (max 5 attempts)');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"otp\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/verify-password-reset-otp",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "verify-password-reset-otp"]
            },
            "description": "Verify the 6-digit OTP sent to email. Rate limited: max 5 attempts before 1-hour lockout."
          },
          "response": []
        },
        {
          "name": "3Ô∏è‚É£ Reset Password (Auto-Login)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseData = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', responseData.data.accessToken);",
                  "    console.log('‚úÖ Password reset successful');",
                  "    console.log('üéØ Auto-logged in with new password');",
                  "    console.log('New Access Token saved:', responseData.data.accessToken.substring(0, 20) + '...');",
                  "} else {",
                  "    console.log('‚ùå Password reset failed');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"otp\": \"123456\",\n  \"password\": \"NewSecurePassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "reset-password"]
            },
            "description": "Reset password using verified OTP. Automatically logs user in with new password and provides fresh JWT tokens."
          },
          "response": []
        },
        {
          "name": "4Ô∏è‚É£ Test New Password Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('‚úÖ New password works perfectly');",
                  "    console.log('üîê Password reset flow completed successfully');",
                  "} else {",
                  "    console.log('‚ùå New password login failed');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"NewSecurePassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Test login with the new password to verify the password reset was successful."
          },
          "response": []
        }
      ],
      "description": "Secure 3-step password reset: Request OTP ‚Üí Verify OTP ‚Üí Reset Password ‚Üí Auto-Login"
    },
    {
      "name": "üß™ Test Scenarios",
      "item": [
        {
          "name": "‚ùå Test Invalid Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"WrongPassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Test login with wrong password (should fail with 401)"
          },
          "response": []
        },
        {
          "name": "‚ùå Test Invalid OTP",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"otp\": \"000000\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/verify-password-reset-otp",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "verify-password-reset-otp"]
            },
            "description": "Test OTP verification with wrong OTP (should fail and increment attempts)"
          },
          "response": []
        },
        {
          "name": "‚ùå Test Duplicate Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Duplicate\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"AnotherPassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Test registration with existing email (should fail with 409)"
          },
          "response": []
        }
      ],
      "description": "Test error scenarios and edge cases"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "console.log('üöÄ Running request to:', pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "console.log('üìä Response Status:', pm.response.code, pm.response.status);",
          "if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
          "    try {",
          "        const responseData = pm.response.json();",
          "        console.log('üìù Response Message:', responseData.message || 'No message');",
          "    } catch (e) {",
          "        console.log('üìù Could not parse JSON response');",
          "    }",
          "}",
          "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
          "console.log('---');"
        ]
      }
    }
  ]
}